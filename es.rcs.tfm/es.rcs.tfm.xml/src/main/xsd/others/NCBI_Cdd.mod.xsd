<?xml version="1.0" ?>
<!-- ============================================
     ::DATATOOL:: Generated from "cdd.asn"
     ::DATATOOL:: by application DATATOOL version 2.4.4
     ::DATATOOL:: on 05/28/2014 23:04:02
     ============================================ -->

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ncbi="http://www.ncbi.nlm.nih.gov"
  xmlns="http://www.ncbi.nlm.nih.gov"
  targetNamespace="http://www.ncbi.nlm.nih.gov"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified">

<!-- ============================================ -->
<!-- This section is mapped from module "NCBI-Cdd"
================================================= -->
<!--
$Revision: 430149 $
**********************************************************************

  Definitions for CDD's 

  NCBI Structure Group

  National Center for Biotechnology Information
  National Institutes of Health
  Bethesda, MD 20894 USA

  October 1999

  asntool -m cdd.asn -w 100 -o cdd.h
  asntool -B objcdd -m cdd.asn -G -w 100 -I objseq.h objsset.h -K cdd.h \
          -M asn.all
**********************************************************************
 NCBI Conserved Domain Definition
-->
<!-- Elements used by other modules:
          Cdd-id,
          Cdd-id-set,
          Cdd,
          Cdd-set,
          Cdd-tree,
          Cdd-tree-set,
          Cdd-pref-nodes,
          Cdd-Project -->

<!-- Elements referenced from other modules:
          Date FROM NCBI-General,
          Pub FROM NCBI-Pub,
          Biostruc-annot-set FROM MMDB,
          Bioseq FROM NCBI-Sequence,
          Seq-annot FROM NCBI-Sequence,
          Seq-entry FROM NCBI-Seqset,
          Org-ref FROM NCBI-Organism,
          Seq-id FROM NCBI-Seqloc,
          Seq-interval FROM NCBI-Seqloc,
          Seq-loc FROM NCBI-Seqloc,
          Seq-feat FROM NCBI-Seqfeat,
          Score-set FROM NCBI-Seqalign,
          Cn3d-style-dictionary,
          Cn3d-user-annotations FROM NCBI-Cn3d,
          PssmWithParameters FROM NCBI-ScoreMat -->

<!-- ============================================ -->



<!-- dealing with lists of preferred tax-nodes  -->
<xs:element name="Cdd-org-ref">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Cdd-org-ref_reference">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-org-ref_active" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="true">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-org-ref_parent-tax-id" type="xs:integer" minOccurs="0"/>
      <xs:element name="Cdd-org-ref_rank" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-org-ref-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd-org-ref"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-pref-node-descr">
  <xs:complexType>
    <xs:choice>
      <xs:element name="Cdd-pref-node-descr_create-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-pref-node-descr_description" type="xs:string"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-pref-node-descr-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd-pref-node-descr"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-pref-nodes">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Cdd-pref-nodes_preferred-nodes">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-org-ref-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-pref-nodes_model-organisms" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-org-ref-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-pref-nodes_optional-nodes" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-org-ref-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-pref-nodes_description" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-pref-node-descr-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Cdd's should not exist without a unique accession, but alternative id's may
 be present as well. It is conceivable that a CD which is created as a merged
 product of two highly redundant CDs will retain the source ids in addition 
 to its new unique id
 database the object resides in
 currently not in use
-->
<xs:element name="Global-id">
  <xs:complexType>
    <xs:sequence>
<!-- SMART, Pfam, LOAD or CD accession -->
      <xs:element name="Global-id_accession" type="xs:string"/>
<!--
 to hold CD-Database release number
 if desired, currently not used
-->
      <xs:element name="Global-id_release" type="xs:string" minOccurs="0"/>
<!--
 version 0 is the seed, version
 numbers increase with update/curate
 cycles
-->
      <xs:element name="Global-id_version" type="xs:integer" minOccurs="0"/>
<!-- this is NOT the source!, rather the -->
      <xs:element name="Global-id_database" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-id">
  <xs:complexType>
    <xs:choice>
<!--
 for synchronization with Entrez
 holds PSSM-Ids
-->
      <xs:element name="Cdd-id_uid" type="xs:integer"/>
<!-- holds accession/version pairs -->
      <xs:element name="Cdd-id_gid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Global-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-id-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd-id"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 record whether the CD contains
 repeated sequence/structure motifs
-->
<xs:element name="Cdd-repeat">
  <xs:complexType>
    <xs:sequence>
<!-- number of tandem repeats in the CD -->
      <xs:element name="Cdd-repeat_count" type="xs:integer"/>
<!-- location on the representative -->
      <xs:element name="Cdd-repeat_location" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- average repeat length -->
      <xs:element name="Cdd-repeat_avglen" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- record a link to Entrez Books -->
<xs:element name="Cdd-book-ref">
  <xs:complexType>
    <xs:sequence>
<!-- abbreviated book title -->
      <xs:element name="Cdd-book-ref_bookname" type="xs:string"/>
      <xs:element name="Cdd-book-ref_textelement">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    unassigned	-  type of element 
    section	-  a section or paragraph
    figgrp	-  a figure or set of figures
    table	-  a table
    chapter	-  a whole chapter
    biblist	-  a lisf of references
    box	-  an inserted box
    glossary	-  glossary
    appendix	-  appendix
-->
                <xs:enumeration value="unassigned"/>
                <xs:enumeration value="section"/>
                <xs:enumeration value="figgrp"/>
                <xs:enumeration value="table"/>
                <xs:enumeration value="chapter"/>
                <xs:enumeration value="biblist"/>
                <xs:enumeration value="box"/>
                <xs:enumeration value="glossary"/>
                <xs:enumeration value="appendix"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- numerical address of the text-element -->
      <xs:element name="Cdd-book-ref_elementid" type="xs:integer" minOccurs="0"/>
<!-- exact address, used with section -->
      <xs:element name="Cdd-book-ref_subelementid" type="xs:integer" minOccurs="0"/>
<!-- address of the text element, if character string -->
      <xs:element name="Cdd-book-ref_celementid" type="xs:string" minOccurs="0"/>
<!-- exact address, if character string -->
      <xs:element name="Cdd-book-ref_csubelementid" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 The description of CDD's refers to the specific set of aligned sequences,
 the region that is being aligned and the information contained in the
 alignment. It may contain a lengthy comment
 describing the function of the domain as well as its origin and all
 other anecdotal information that can't be pressed into a rigid scheme.
 Crosslinks to reference papers available in PubMed are possible as well.
 There can be as many of these as you want in the CDD.
-->
<xs:element name="Cdd-descr">
  <xs:complexType>
    <xs:choice>
<!--
 alternative names for the CDD
 if domain has several common names
-->
      <xs:element name="Cdd-descr_othername" type="xs:string"/>
<!--
 intracellular, extracellular, etc.
 to record spatial and/or temporal
 expression in free-text format
-->
      <xs:element name="Cdd-descr_category" type="xs:string"/>
<!-- this is where descriptions go -->
      <xs:element name="Cdd-descr_comment" type="xs:string"/>
<!-- a citation describing the domain -->
      <xs:element name="Cdd-descr_reference">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Date of first creation/dump -->
      <xs:element name="Cdd-descr_create-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- holds the highest common tax node -->
      <xs:element name="Cdd-descr_tax-source">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 the database the seeds were created
 from, e.g. SMART, PFAM, etc..
-->
      <xs:element name="Cdd-descr_source" type="xs:string"/>
      <xs:element name="Cdd-descr_status">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    finished-ok	-  a public curated CD
    pending-release	-  needs work done, not yet released
    other-asis	-  imported as-is, immediate release
    matrix-only	-  CD holds a Psi-Blast PSSM only,
         does not contain alignment data
    update-running	-  has been flagged for
         update (in queue)
    auto-updated	-  update finished, no
         work necessary
    claimed	-  is earmarked for curation
    curated-complete	-  public curated member of a
         completed family
    other	-  for CD production?
-->
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="finished-ok" ncbi:intvalue="1"/>
                    <xs:enumeration value="pending-release" ncbi:intvalue="2"/>
                    <xs:enumeration value="other-asis" ncbi:intvalue="3"/>
                    <xs:enumeration value="matrix-only" ncbi:intvalue="4"/>
                    <xs:enumeration value="update-running" ncbi:intvalue="5"/>
                    <xs:enumeration value="auto-updated" ncbi:intvalue="6"/>
                    <xs:enumeration value="claimed" ncbi:intvalue="7"/>
                    <xs:enumeration value="curated-complete" ncbi:intvalue="8"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- Date of last version change -->
      <xs:element name="Cdd-descr_update-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 for storing curation notes
 those won't make it into public
 distributions
-->
      <xs:element name="Cdd-descr_scrapbook">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Cdd-descr_scrapbook_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for linking back to source db -->
      <xs:element name="Cdd-descr_source-id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to record repeat counts -->
      <xs:element name="Cdd-descr_repeats">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-repeat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to record short-term history -->
      <xs:element name="Cdd-descr_old-root">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-descr_curation-status">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    unassigned	-  to record curation status
    prein	-  when CD is checked out from
    ofc	-  the tracking database, for 
    iac	-  use within curation software
-->
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="prein" ncbi:intvalue="1"/>
                    <xs:enumeration value="ofc" ncbi:intvalue="2"/>
                    <xs:enumeration value="iac" ncbi:intvalue="3"/>
                    <xs:enumeration value="ofv1" ncbi:intvalue="4"/>
                    <xs:enumeration value="iav1" ncbi:intvalue="5"/>
                    <xs:enumeration value="ofv2" ncbi:intvalue="6"/>
                    <xs:enumeration value="iav2" ncbi:intvalue="7"/>
                    <xs:enumeration value="postin" ncbi:intvalue="8"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-descr_readonly-status">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    unassigned	-  to record read-only status
    readonly	-  when CD is checked out from
    readwrite	-  the tracking database, for
    other	-  use within curation software
-->
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="readonly" ncbi:intvalue="1"/>
                    <xs:enumeration value="readwrite" ncbi:intvalue="2"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- links to Entrez/books -->
      <xs:element name="Cdd-descr_book-ref">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-book-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- add citations and/or author names -->
      <xs:element name="Cdd-descr_attribution">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- hold short descriptive text -->
      <xs:element name="Cdd-descr_title" type="xs:string"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-descr-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd-descr"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 the Cdd-tree stores the hierarchy of CDDs. These objects are stored separate
 from the CDs to allow for fast retrieval and use as an 'index' into CDs
 all the components in a CD-tree match components in the full-sized CD
 and should be synchronized
-->
<xs:element name="Cdd-tree">
  <xs:complexType>
    <xs:sequence>
<!-- short name  copied from CD -->
      <xs:element name="Cdd-tree_name" type="xs:string"/>
<!-- IDs         copied from CD -->
      <xs:element name="Cdd-tree_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- description copied from CD -->
      <xs:element name="Cdd-tree_description" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-descr-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- CD is the result of a split/merge -->
      <xs:element name="Cdd-tree_parent" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- this CD has been split -->
      <xs:element name="Cdd-tree_children" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- related CDs (have common hits) -->
      <xs:element name="Cdd-tree_siblings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 co-occurring CDs (non-overlapping 
 hits to same sequences)
-->
      <xs:element name="Cdd-tree_neighbors" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-tree-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd-tree"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Matrix definitions, these are supposed to store PSSMs and corresponding 
 matrices of relative residue frequencies.
 the number of columns and rows is listed explicitly, values in columns
 are stored column by column, i.e. in groups of nrows values for each column
-->
<xs:element name="Matrix">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Matrix_ncolumns" type="xs:integer"/>
      <xs:element name="Matrix_nrows" type="xs:integer"/>
      <xs:element name="Matrix_row-labels" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Matrix_row-labels_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Matrix_scale-factor" type="xs:integer"/>
      <xs:element name="Matrix_columns">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Matrix_columns_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 definition for matrix of pairwise "distances", stored as the upper 
 triangle of a squared n x n matrix (excluding the diagonal), this is
 supposed to store pairwise percentages of identical residues, pairwise
 alignment scores or E-values from pairwise BLAST sequence comparisons
-->
<xs:element name="Triangle">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Triangle_nelements" type="xs:integer"/>
      <xs:element name="Triangle_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Score-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Triangle_div-ranks" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Triangle_div-ranks_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Update-align is supposed to contain alignments that still need some work
 done to fit into the CD-proper alignment. These originate from the
 CD update process (generated by Blast, for example) or may be created in
 an editing session to save its state
-->
<xs:element name="Update-comment">
  <xs:complexType>
    <xs:choice>
<!--
 free text to describe nature of
 Update-align
-->
      <xs:element name="Update-comment_comment" type="xs:string"/>
<!--
 suggestion for inclusion in the CD
 without corresponding alignment
-->
      <xs:element name="Update-comment_addthis">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 if one or several alignment rows are
 to be replaced by the Update-align
-->
      <xs:element name="Update-comment_replaces">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 if used with Reject-id, specify a
 location on a sequence which should
 not be used
-->
      <xs:element name="Update-comment_reject-loc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 if update alignment imported from
 citation and for whenever it seems
 necessary to cite
-->
      <xs:element name="Update-comment_reference">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
 Both fields are optional, as the Update-align may be a Seq-annot without
 description, or a suggestion to add a sequence without the corresponding
 alignment
-->
<xs:element name="Update-align">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Update-align_description" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Update-comment"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- contains the SeqAlign -->
      <xs:element name="Update-align_seqannot" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-annot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Update-align_type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="update" ncbi:intvalue="1"/>
                    <xs:enumeration value="update-3d" ncbi:intvalue="2"/>
                    <xs:enumeration value="demoted" ncbi:intvalue="51"/>
                    <xs:enumeration value="demoted-3d" ncbi:intvalue="52"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Reject-id">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Reject-id_description" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Update-comment"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Reject-id_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Feature-evidence">
  <xs:complexType>
    <xs:choice>
<!--
 so we can spell out what doesn't
 fit in any other category
-->
      <xs:element name="Feature-evidence_comment" type="xs:string"/>
<!-- evidence via a literature reference -->
      <xs:element name="Feature-evidence_reference">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 evidence via Biostruc-features, such
 as structure superpositions 
-->
      <xs:element name="Feature-evidence_bsannot">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Biostruc-annot-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 evidence is a Sequence feature found
 elsewhere
-->
      <xs:element name="Feature-evidence_seqfeat">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-feat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- evidence is a book chapter or figure -->
      <xs:element name="Feature-evidence_book-ref">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-book-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Align-annot">
  <xs:complexType>
    <xs:sequence>
<!--
 points to a location in one of the
 aligned sequences, usually the
 master/representative
-->
      <xs:element name="Align-annot_location">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 to hold descriptions/names like
 "Heme binding site" or "catalytic
 triad" etc., something that should
 be used for labels in visualization
-->
      <xs:element name="Align-annot_description" type="xs:string" minOccurs="0"/>
<!--
 evidence we can
 compute with
-->
      <xs:element name="Align-annot_evidence" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Feature-evidence"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 for typing annotated features
 0 .. no type assigned
 1 .. active site
 2 .. polypeptide binding site
 3 .. nucleic acid binding site
 4 .. ion binding site
 5 .. chemical binding site
 6 .. posttranslational modification site
 7 .. structural motif
-->
      <xs:element name="Align-annot_type" type="xs:integer" minOccurs="0"/>
<!-- adding more names for indexing -->
      <xs:element name="Align-annot_aliases" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Align-annot_aliases_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to validate mapping of sites -->
      <xs:element name="Align-annot_motif" type="xs:string" minOccurs="0"/>
<!--
 0 for validation,
 1 for motif somewhere in seqloc
 2 for multiple motifs in seqloc
-->
      <xs:element name="Align-annot_motifuse" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Align-annot-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Align-annot"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 the Domain-parent records an evolutionary relationship which may not be
 as simple as a classical parent-child relationship in a typical hierarchy,
 i.e. where a CD is merely a specific subgroup ("child") of a more general
 diverse alignment model ("parent"). A CD alignment model may be the result
 of an ancient fusion event, combining two or more domains into a bigger unit
 which has subsequently undergone a divergent evolutionary process similar to
 what may have happened to a single "domain". A CD alignment model may 
 also reflect the result of a deletion event, where a specific subgroup
 lacks part of a (set of) domain(s), but where the part present is found to
 be highly similar to a putative "parent", with some added evidence for
 an actual deletion, like from the distribution of truncated copies in phylogenetic
 lineages. Deletion events which affect different parts of a set of
 duplicated domain architectures may be indistinguishable from actual
 fission events, which means that we may want to represent the latter as
 deletions after duplication and do not need a special case for fissions.
-->
<xs:element name="Domain-parent">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Domain-parent_parent-type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    classical	-  the classification of parent child relations
-->
                    <xs:enumeration value="classical" ncbi:intvalue="0"/>
                    <xs:enumeration value="fusion" ncbi:intvalue="1"/>
                    <xs:enumeration value="deletion" ncbi:intvalue="2"/>
                    <xs:enumeration value="permutation" ncbi:intvalue="3"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- identify the section parent by accession -->
      <xs:element name="Domain-parent_parentid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 contains the sequence alignment linking
 CD alignment models, should align the 
 masters/representatives of each CD
-->
      <xs:element name="Domain-parent_seqannot" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-annot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- record sequence trees generated by a suitable algorithm. -->
<xs:element name="Sequence-tree">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Sequence-tree_cdAccession" type="xs:string" minOccurs="0"/>
      <xs:element name="Sequence-tree_algorithm">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Algorithm-type"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Sequence-tree_isAnnotated" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Sequence-tree_root">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTree-node"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTree-node">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="SeqTree-node_isAnnotated" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTree-node_name" type="xs:string" minOccurs="0"/>
      <xs:element name="SeqTree-node_distance" type="xs:double" minOccurs="0"/>
      <xs:element name="SeqTree-node_children">
        <xs:complexType>
          <xs:choice>
            <xs:element name="SeqTree-node_children_children">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="SeqTree-node"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="SeqTree-node_children_footprint">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="SeqTree-node_children_footprint_seqRange">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="Seq-interval"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="SeqTree-node_children_footprint_rowId" type="xs:integer" minOccurs="0"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTree-node_annotation" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Node-annotation"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Algorithm-type">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Algorithm-type_scoring-Scheme">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="percent-id" ncbi:intvalue="1"/>
                    <xs:enumeration value="kimura-corrected" ncbi:intvalue="2"/>
                    <xs:enumeration value="aligned-score" ncbi:intvalue="3"/>
                    <xs:enumeration value="aligned-score-ext" ncbi:intvalue="4"/>
                    <xs:enumeration value="aligned-score-filled" ncbi:intvalue="5"/>
                    <xs:enumeration value="blast-footprint" ncbi:intvalue="6"/>
                    <xs:enumeration value="blast-full" ncbi:intvalue="7"/>
                    <xs:enumeration value="hybrid-aligned-score" ncbi:intvalue="8"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Algorithm-type_clustering-Method">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="single-linkage" ncbi:intvalue="1"/>
                    <xs:enumeration value="neighbor-joining" ncbi:intvalue="2"/>
                    <xs:enumeration value="fast-minimum-evolution" ncbi:intvalue="3"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Algorithm-type_score-Matrix" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="blosum45" ncbi:intvalue="1"/>
                    <xs:enumeration value="blosum62" ncbi:intvalue="2"/>
                    <xs:enumeration value="blosum80" ncbi:intvalue="3"/>
                    <xs:enumeration value="pam30" ncbi:intvalue="4"/>
                    <xs:enumeration value="pam70" ncbi:intvalue="5"/>
                    <xs:enumeration value="pam250" ncbi:intvalue="6"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Algorithm-type_gapOpen" type="xs:integer" minOccurs="0"/>
      <xs:element name="Algorithm-type_gapExtend" type="xs:integer" minOccurs="0"/>
      <xs:element name="Algorithm-type_gapScaleFactor" type="xs:integer" minOccurs="0"/>
      <xs:element name="Algorithm-type_nTerminalExt" type="xs:integer" minOccurs="0"/>
      <xs:element name="Algorithm-type_cTerminalExt" type="xs:integer" minOccurs="0"/>
      <xs:element name="Algorithm-type_tree-scope" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="allDescendants" ncbi:intvalue="0"/>
                    <xs:enumeration value="immediateChildrenOnly" ncbi:intvalue="1"/>
                    <xs:enumeration value="selfOnly" ncbi:intvalue="2"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Algorithm-type_coloring-scope" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="allDescendants" ncbi:intvalue="0"/>
                    <xs:enumeration value="immediateChildrenOnly" ncbi:intvalue="1"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Node-annotation">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Node-annotation_presentInChildCD" type="xs:string" minOccurs="0"/>
      <xs:element name="Node-annotation_note" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 the Cdd is the basic ASN.1 object storing an annotated and curated set of
 alignments (formulated as a set of pairwise master-slave alignments). 
 The alignment data are contained in Seq-annots, and a special type of
 object, the Update-align, contains additional alignment data from unfinished
 editing sessions and update processes. The Biostruc-annot-set holds 
 structure superposition information for multiple structure-derived rows in
 the alignment.
 Version numbers in Global-ids are meant to be updated every time the Cdd is
 changed in a way that does not require Global-ids to be changed (sequences
 added in update cycle, annotation changed, alignment errors fixed)
-->
<xs:element name="Cdd">
  <xs:complexType>
    <xs:sequence>
<!-- a short name (can be the accession..) -->
      <xs:element name="Cdd_name" type="xs:string"/>
<!-- this CD's Ids -->
      <xs:element name="Cdd_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- status, references, etc. -->
      <xs:element name="Cdd_description" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-descr-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- contains the CD alignment -->
      <xs:element name="Cdd_seqannot" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-annot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 contains structure
 alignment data
 or "core" definitions
-->
      <xs:element name="Cdd_features" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Biostruc-annot-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- store as bioseq-set inside seq-entry -->
      <xs:element name="Cdd_sequences" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-entry"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 profile for this region only
 also stores the Seq-id of the master
-->
      <xs:element name="Cdd_profile-range" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-interval"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 holds the truncated master, which
 may be something like a consensus,
 uses the same sequence coordinate
 frame as the profile-range
-->
      <xs:element name="Cdd_trunc-master" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Bioseq"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- relative residue frequencies -->
      <xs:element name="Cdd_posfreq" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Matrix"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Position dependent score matrix -->
      <xs:element name="Cdd_scoremat" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Matrix"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- pairwise distances for all seqs. -->
      <xs:element name="Cdd_distance" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Triangle"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- this CD is the result of a split -->
      <xs:element name="Cdd_parent" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- this CD has been split, not used -->
      <xs:element name="Cdd_children" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- related CDs (common hits), clusters -->
      <xs:element name="Cdd_siblings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- co-occurring CDs, not used -->
      <xs:element name="Cdd_neighbors" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 contains alignments from
 update or "lower panel"
-->
      <xs:element name="Cdd_pending" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Update-align"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 SeqIds of rejected CD-
 members, ignore in update
-->
      <xs:element name="Cdd_rejects" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Reject-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- record if CD has a 3D representative -->
      <xs:element name="Cdd_master3d" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- alignment annotation -->
      <xs:element name="Cdd_alignannot" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Align-annot-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- record rendering styles -->
      <xs:element name="Cdd_style-dictionary" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cn3d-style-dictionary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- user annotations in Cn3D -->
      <xs:element name="Cdd_user-annotations" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cn3d-user-annotations"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- list of parents -->
      <xs:element name="Cdd_ancestors" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Domain-parent"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd_scoreparams" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PssmWithParameters"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd_seqtree" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Sequence-tree"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Cdd"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Cdd projects store a set of CDs, typically related to each other
 relationships would be specified using the ancestors fields in the
 individual CD objects. For use with CD-Tree, a program to visualize
 curated CD hierarchies and evidence for hierarchical family structures.
-->
<xs:element name="Cdd-Viewer-Rect">
  <xs:complexType>
    <xs:sequence>
<!-- top coordinate -->
      <xs:element name="Cdd-Viewer-Rect_top" type="xs:integer"/>
<!-- left  coordinate -->
      <xs:element name="Cdd-Viewer-Rect_left" type="xs:integer"/>
<!-- width  -->
      <xs:element name="Cdd-Viewer-Rect_width" type="xs:integer"/>
<!-- height -->
      <xs:element name="Cdd-Viewer-Rect_height" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-Viewer">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Cdd-Viewer_ctrl">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="cd-info" ncbi:intvalue="1"/>
                    <xs:enumeration value="align-annot" ncbi:intvalue="2"/>
                    <xs:enumeration value="seq-list" ncbi:intvalue="3"/>
                    <xs:enumeration value="seq-tree" ncbi:intvalue="4"/>
                    <xs:enumeration value="merge-preview" ncbi:intvalue="5"/>
                    <xs:enumeration value="cross-hits" ncbi:intvalue="6"/>
                    <xs:enumeration value="notes" ncbi:intvalue="7"/>
                    <xs:enumeration value="tax-tree" ncbi:intvalue="8"/>
                    <xs:enumeration value="dart" ncbi:intvalue="9"/>
                    <xs:enumeration value="dart-selected-rows" ncbi:intvalue="10"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- viewer rectangle -->
      <xs:element name="Cdd-Viewer_rect" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-Viewer-Rect"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- list of accessions associated with a viewer -->
      <xs:element name="Cdd-Viewer_accessions">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Cdd-Viewer_accessions_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Cdd-Script">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Cdd-Script_type" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unassigned" ncbi:intvalue="0"/>
                    <xs:enumeration value="user-recorded" ncbi:intvalue="1"/>
                    <xs:enumeration value="server-generated" ncbi:intvalue="2"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- user assigned name/description -->
      <xs:element name="Cdd-Script_name" type="xs:string" minOccurs="0"/>
<!-- actual script commands -->
      <xs:element name="Cdd-Script_commands" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- cd colors are as:  0000FF for red, 00FF00 for green, FF0000 for blue -->
<xs:element name="Cdd-Project">
  <xs:complexType>
    <xs:sequence>
<!-- cds -->
      <xs:element name="Cdd-Project_cds">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cdd"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- colors   -->
      <xs:element name="Cdd-Project_cdcolor">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Cdd-Project_cdcolor_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Sequence viewers -->
      <xs:element name="Cdd-Project_viewers">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cdd-Viewer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- log -->
      <xs:element name="Cdd-Project_log" type="xs:string"/>
<!-- command scripts -->
      <xs:element name="Cdd-Project_scripts" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cdd-Script"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to assign unique project id -->
      <xs:element name="Cdd-Project_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdd-id-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to store request IDs for batch CD-Searches -->
      <xs:element name="Cdd-Project_rids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Cdd-Project_rids_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-Project_create-date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdd-Project_update-date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for temporary tracking in the database -->
      <xs:element name="Cdd-Project_project-id" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

</xs:schema>
